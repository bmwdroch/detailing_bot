"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–ø–∏—Å—è–º–∏, —É—Å–ª—É–≥–∞–º–∏ –∏ –æ–±—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
"""

import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from core.models import AppointmentStatus, Service
from services.analytics.analytics import AnalyticsService
from services.db.database_manager import DatabaseManager
from services.notifications.notification_service import NotificationService
from utils.formatters import (
    format_appointment_info, format_datetime, format_money
)
from utils.keyboards import (
    get_admin_menu_keyboard, get_appointment_actions_keyboard,
    get_cancel_keyboard, get_confirmation_keyboard, get_main_menu_keyboard,
    get_pagination_keyboard, get_service_confirmation_keyboard
)
from utils.validators import (
    validate_service_description, validate_service_duration,
    validate_service_name, validate_service_price
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router(name="admin")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class AdminStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏
    ADD_SERVICE_NAME = State()
    ADD_SERVICE_DESCRIPTION = State()
    ADD_SERVICE_PRICE = State()
    ADD_SERVICE_DURATION = State()
    CONFIRM_SERVICE = State()
    
    # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏
    EDIT_APPOINTMENT = State()
    RESCHEDULE_DATE = State()
    RESCHEDULE_TIME = State()
    ADD_COMMENT = State()

    EDIT_CONTACTS = State()

@router.message(Command("edit_contacts"))
@router.message(F.text == "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")
async def cmd_edit_contacts(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã
    current_contacts = await db.get_setting("contacts")
    
    await message.answer(
        "–¢–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã:\n\n"
        f"{current_contacts}\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –æ—Ç–º–µ–Ω—É:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.EDIT_CONTACTS)

@router.message(AdminStates.EDIT_CONTACTS)
async def process_edit_contacts(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
    new_contacts = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞
    if len(new_contacts) < 10:
        await message.answer(
            "–¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        )
        return
        
    if len(new_contacts) > 1000:
        await message.answer(
            "–¢–µ–∫—Å—Ç –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é:"
        )
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–∞–∫—Ç—ã
    success, error = await db.update_setting("contacts", new_contacts)
    
    if success:
        await message.answer(
            "‚úÖ –ö–æ–Ω—Ç–∞–∫—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!",
            reply_markup=get_admin_menu_keyboard()
        )
    else:
        await message.answer(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤: {error}",
            reply_markup=get_admin_menu_keyboard()
        )
    
    await state.clear()

class ServiceData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.name: Optional[str] = None
        self.description: Optional[str] = None
        self.price: Optional[str] = None
        self.duration: Optional[int] = None
        self.is_active: bool = True


async def check_admin(message: Union[Message, CallbackQuery]) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    
    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback
        
    Returns:
        bool: –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    """
    user_id = message.from_user.id
    admin_ids = message.bot.config.admin_ids
    return user_id in admin_ids


@router.message(Command("admin"))
async def cmd_admin(message: Message) -> None:
    """–í—Ö–æ–¥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é"""
    if not await check_admin(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
        return
        
    await message.answer(
        "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å",
        reply_markup=get_admin_menu_keyboard()
    )


@router.message(F.text == "üë• –í—Å–µ –∑–∞–ø–∏—Å–∏")
async def cmd_all_appointments(message: Message, db: DatabaseManager, state: FSMContext) -> None:
    """
    –í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    """
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–≤—É—é
    data = await state.get_data()
    page = data.get("appointments_page", 1)
    per_page = data.get("appointments_per_page", 10)

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    appointments = await db.get_appointments_paginated(page, per_page)
    total_pages = (await db.get_appointments_count() + per_page - 1) // per_page

    if not appointments:
        await message.answer("–ó–∞–ø–∏—Å–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç ‚Äì —Å–ø–∏—Å–æ–∫ –∑–∞–ø–∏—Å–µ–π (–∫–∞–∂–¥–∞—è –∑–∞–ø–∏—Å—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π)
    text_lines = ["üìÖ –í—Å–µ –∑–∞–ø–∏—Å–∏:"]
    for apt in appointments:
        text_lines.append(format_appointment_info(apt, include_client=True))
    text = "\n\n".join(text_lines)

    # –§–æ—Ä–º–∏—Ä—É–µ–º inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
    # 1. –î–ª—è –∫–∞–∂–¥–æ–π –∑–∞–ø–∏—Å–∏ –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É ¬´–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ #ID¬ª
    keyboard_rows = []
    for apt in appointments:
        btn = InlineKeyboardButton(
            text=f"–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ #{apt.id}",
            callback_data=f"appointment:actions:{apt.id}"
        )
        keyboard_rows.append([btn])

    # 2. –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_kb = get_pagination_keyboard(page, total_pages, "appointments", per_page)
    for row in pagination_kb.inline_keyboard:
        keyboard_rows.append(row)

    # 3. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
    keyboard_rows.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    kb = InlineKeyboardMarkup(inline_keyboard=keyboard_rows)
    await message.answer(text, reply_markup=kb)
    await state.update_data(appointments_page=page)

@router.message(F.text == "üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")
async def cmd_manage_services(
    message: Message,
    db: DatabaseManager,
    state: FSMContext
) -> None:
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏"""
    if not await check_admin(message):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É"), KeyboardButton(text="üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É")
async def cmd_add_service(message: Message, state: FSMContext) -> None:
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—Å–ª—É–≥–∏"""
    if not await check_admin(message):
        return

    await state.update_data(service=ServiceData())
    
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.ADD_SERVICE_NAME)


@router.message(AdminStates.ADD_SERVICE_NAME)
async def process_service_name(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    name = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è
    is_valid, error = validate_service_name(name)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ
    data = await state.get_data()
    service: ServiceData = data["service"]
    service.name = name
    await state.update_data(service=service)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.ADD_SERVICE_DESCRIPTION)


@router.message(AdminStates.ADD_SERVICE_DESCRIPTION)
async def process_service_description(
    message: Message,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è —É—Å–ª—É–≥–∏"""
    description = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è
    is_valid, error = validate_service_description(description)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    data = await state.get_data()
    service: ServiceData = data["service"]
    service.description = description
    await state.update_data(service=service)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ü–µ–Ω—É
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.ADD_SERVICE_PRICE)


@router.message(AdminStates.ADD_SERVICE_PRICE)
async def process_service_price(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏"""
    price = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ü–µ–Ω—ã
    is_valid, error = validate_service_price(price)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ü–µ–Ω—É
    data = await state.get_data()
    service: ServiceData = data["service"]
    service.price = price
    await state.update_data(service=service)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ –≤ –º–∏–Ω—É—Ç–∞—Ö:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(AdminStates.ADD_SERVICE_DURATION)


@router.message(AdminStates.ADD_SERVICE_DURATION)
async def process_service_duration(
    message: Message,
    state: FSMContext
) -> None:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—Å–ª—É–≥–∏"""
    try:
        duration = int(message.text.strip())
    except ValueError:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö):"
        )
        return

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
    is_valid, error = validate_service_duration(duration)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    data = await state.get_data()
    service: ServiceData = data["service"]
    service.duration = duration
    await state.update_data(service=service)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_service_confirmation(message, service)
    await state.set_state(AdminStates.CONFIRM_SERVICE)

async def show_service_confirmation(message: Message, service: ServiceData) -> None:
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º
    inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ callback_data.
    """
    text = (
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ: {service.name}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {service.description}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {format_money(service.price)}\n"
        f"–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service.duration} –º–∏–Ω.\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )
    await message.answer(text, reply_markup=get_service_confirmation_keyboard())


@router.callback_query(lambda c: c.data in ["service:confirm", "service:cancel"])
async def process_service_confirmation(callback: CallbackQuery, state: FSMContext, db: DatabaseManager) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è/–æ—Ç–º–µ–Ω—ã –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏.
    –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "service:cancel" ‚Äì –ø—Ä–æ—Ü–µ—Å—Å –æ—Ç–º–µ–Ω—è–µ—Ç—Å—è.
    –ï—Å–ª–∏ "service:confirm" ‚Äì –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏ —É—Å–ª—É–≥–∞ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –≤ –ë–î.
    """
    if callback.data == "service:cancel":
        await state.clear()
        await callback.message.edit_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=None)
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    service: ServiceData = data.get("service")
    if not service:
        await callback.message.edit_text("–î–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ.", reply_markup=None)
        await state.clear()
        return

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª—É–≥—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    success, error, _ = await db.add_service(
        name=service.name,
        description=service.description,
        price=service.price,
        duration=service.duration,
        is_active=service.is_active
    )
    if not success:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —É—Å–ª—É–≥–∏: {error}\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None
        )
        await state.clear()
        return

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Äì —É–±–∏—Ä–∞–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.edit_text("‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!", reply_markup=None)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –º–µ–Ω—é
    await callback.bot.send_message(callback.message.chat.id, "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é", reply_markup=get_admin_menu_keyboard())
    await state.clear()

@router.message(F.text == "üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥")
async def cmd_list_services(message: Message, db: DatabaseManager) -> None:
    """–í—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —É—Å–ª—É–≥ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –º–µ—Ç–æ–¥ –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö —É—Å–ª—É–≥, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
    services_list = await db.get_active_services()
    if not services_list:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.", reply_markup=get_admin_menu_keyboard())
        return

    text = "üìã –°–ø–∏—Å–æ–∫ —É—Å–ª—É–≥:\n\n"
    for service in services_list:
        text += f"ID: {service.id} - {service.name} - {service.price} ‚ÇΩ - {service.duration} –º–∏–Ω\n"
    await message.answer(text, reply_markup=get_admin_menu_keyboard())

@router.callback_query(lambda c: c.data and c.data.startswith("appointment:") and "actions" not in c.data)
async def process_appointment_action(callback: CallbackQuery, db: DatabaseManager, notifications: NotificationService) -> None:
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–µ–π—Å—Ç–≤–∏—è —Å –∑–∞–ø–∏—Å—å—é: –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, –æ—Ç–º–µ–Ω–∞, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∏–µ.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç callback data –≤–∏–¥–∞ "appointment:confirm:<ID>", "appointment:cancel:<ID>", "appointment:complete:<ID>" –∏ —Ç.–ø.
    """
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback data
    try:
        _, action, appointment_id = callback.data.split(":")
        appointment_id = int(appointment_id)
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    appointment = await db.get_appointment(appointment_id)
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π)
    client = await db.get_client_by_id(appointment.client_id)
    if not client:
        await callback.answer("–ö–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return

    old_status = appointment.status
    if action == "confirm":
        success, error = await db.update_appointment_status(appointment_id, AppointmentStatus.CONFIRMED)
    elif action == "cancel":
        success, error = await db.update_appointment_status(appointment_id, AppointmentStatus.CANCELLED)
    elif action == "complete":
        success, error = await db.update_appointment_status(appointment_id, AppointmentStatus.COMPLETED)
    elif action == "reschedule":
        # –ï—Å–ª–∏ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ–Ω–æ—Å–∞ ‚Äì –¥–æ–±–∞–≤–∏—Ç—å –µ—ë –∑–¥–µ—Å—å
        await callback.answer("–§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–æ—Å–∞ –ø–æ–∫–∞ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞", show_alert=True)
        return
    else:
        await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ", show_alert=True)
        return

    if not success:
        await callback.answer(f"–û—à–∏–±–∫–∞: {error}", show_alert=True)
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    appointment = await db.get_appointment(appointment_id)
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ (–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω)
    await notifications.notify_appointment_status_change(appointment=appointment, client=client, old_status=old_status)
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π
    updated_kb = get_appointment_actions_keyboard(appointment_id, appointment.status)
    await callback.message.edit_text(
        format_appointment_info(appointment, include_client=True),
        reply_markup=updated_kb
    )
    await callback.answer()


@router.message(F.text == "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def cmd_statistics(
    message: Message,
    analytics: AnalyticsService
) -> None:
    """–ü—Ä–æ—Å–º–æ—Ç—Ä —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    end_date = datetime.now()
    start_date = end_date - timedelta(days=30)
    stats = await analytics.get_period_stats(start_date, end_date)

    if not stats:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
    text = (
        "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π:\n\n"
        f"–ó–∞–ø–∏—Å–∏:\n"
        f"- –í—Å–µ–≥–æ: {stats['total']['appointments']}\n"
        f"- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['total']['completed']}\n"
        f"- –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['total']['cancelled']}\n"
        f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['total']['conversion']}%\n\n"
        f"–§–∏–Ω–∞–Ω—Å—ã:\n"
        f"- –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_money(stats['total']['income'])}\n"
        f"- –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {format_money(stats['total']['expense'])}\n"
        f"- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {format_money(stats['total']['profit'])}\n\n"
        f"–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"- –ó–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å: {stats['average']['daily_appointments']}\n"
        f"- –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {format_money(stats['average']['daily_income'])}\n"
        f"- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_money(stats['average']['check'])}"
    )

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏
    popular_services = await analytics.get_popular_services(start_date, end_date, 5)
    if popular_services:
        text += "\n\n–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏:\n"
        for i, service in enumerate(popular_services, 1):
            text += (
                f"{i}. {service['name']}\n"
                f"   –ó–∞–ø–∏—Å–µ–π: {service['count']}\n"
                f"   –î–æ—Ö–æ–¥: {format_money(service['total_amount'])}\n"
            )

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º
    busy_hours = await analytics.get_busy_hours(start_date, end_date)
    if busy_hours:
        text += "\n\n–ó–∞–≥—Ä—É–∂–µ–Ω–Ω–æ—Å—Ç—å –ø–æ —á–∞—Å–∞–º:\n"
        max_bookings = max(busy_hours.values())
        for hour in range(9, 21):  # –†–∞–±–æ—á–∏–µ —á–∞—Å—ã
            count = busy_hours.get(hour, 0)
            bar = "‚ñà" * int(count * 10 / max_bookings) if max_bookings else ""
            text += f"{hour:02d}:00 {bar} ({count})\n"

    await message.answer(text)


@router.message(F.text == "üìä –û—Ç—á—ë—Ç—ã")
async def cmd_reports(message: Message) -> None:
    """–ú–µ–Ω—é –æ—Ç—á—ë—Ç–æ–≤"""
    if not await check_admin(message):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            ["üìÖ –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á—ë—Ç", "üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á—ë—Ç"],
            ["üìä –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á—ë—Ç", "üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π –æ—Ç—á—ë—Ç"],
            ["‚ùå –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –æ—Ç—á—ë—Ç–∞:",
        reply_markup=keyboard
    )


@router.message(F.text.startswith("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
async def cmd_change_status(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏"""
    if not await check_admin(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    try:
        appointment_id = int(message.text.split("#")[1])
    except (IndexError, ValueError):
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã")
        return

    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å—å
    appointment = await db.get_appointment(appointment_id)
    if not appointment:
        await message.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è
    text = (
        f"–ó–∞–ø–∏—Å—å #{appointment_id}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {appointment.status.value}\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
    )
    
    keyboard = get_appointment_actions_keyboard(
        appointment_id,
        appointment.status
    )
    
    await message.answer(text, reply_markup=keyboard)


@router.message(F.text == "üîç –ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π")
async def cmd_search_appointments(
    message: Message,
    state: FSMContext
) -> None:
    """–ü–æ–∏—Å–∫ –∑–∞–ø–∏—Å–µ–π"""
    if not await check_admin(message):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            ["üîç –ü–æ –∫–ª–∏–µ–Ω—Ç—É", "üìÖ –ü–æ –¥–∞—Ç–µ"],
            ["üì± –ü–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É", "üöó –ü–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—é"],
            ["‚ùå –û—Ç–º–µ–Ω–∞"]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏—Ç–µ—Ä–∏–π –ø–æ–∏—Å–∫–∞:",
        reply_markup=keyboard
    )


@router.message(F.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def cmd_settings(message: Message) -> None:
    """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    if not await check_admin(message):
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            ["üïí –†–∞–±–æ—á–µ–µ –≤—Ä–µ–º—è", "üìÖ –í—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏"],
            ["üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
            ["‚ùå –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã:",
        reply_markup=keyboard
    )


@router.message(Command("broadcast"))
async def cmd_broadcast(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º"""
    if not await check_admin(message):
        return

    class BroadcastStates(StatesGroup):
        ENTER_MESSAGE = State()
        CONFIRM_BROADCAST = State()

    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(BroadcastStates.ENTER_MESSAGE)

@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def admin_cancel(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–º —Ä–µ–∂–∏–º–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–µ –º–µ–Ω—é.
    """
    await state.clear()
    await message.answer("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=get_admin_menu_keyboard())

@router.callback_query(lambda c: c.data and c.data.startswith("appointment:actions:"))
async def appointment_actions_callback(callback: CallbackQuery, db: DatabaseManager) -> None:
    """
    –ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ #ID" –≤—ã–≤–æ–¥–∏—Ç inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º–∏ –¥–µ–π—Å—Ç–≤–∏—è–º–∏.
    """
    try:
        parts = callback.data.split(":")
        appointment_id = int(parts[2])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    appointment = await db.get_appointment(appointment_id)
    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return

    actions_kb = get_appointment_actions_keyboard(appointment_id, appointment.status)
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–∞–º–µ–Ω—è—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
    await callback.message.edit_reply_markup(reply_markup=actions_kb)
    await callback.answer()
