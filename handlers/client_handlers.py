"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∫–ª–∏–µ–Ω—Ç—Å–∫–æ–π —á–∞—Å—Ç–∏ –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ —É—Å–ª—É–≥–∏ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–∏–º–∏ –∑–∞–ø–∏—Å—è–º–∏.
"""

import logging
from datetime import datetime
from typing import Dict, Optional, Union

from aiogram import F, Router
from aiogram.filters import Command, CommandStart, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message, ReplyKeyboardRemove

from core.models import AppointmentStatus, Client
from services.db.database_manager import DatabaseManager
from services.notifications.notification_service import NotificationService
from utils.formatters import format_appointment_info, format_phone
from utils.keyboards import (
    get_appointment_actions_keyboard,
    get_cancel_keyboard,
    get_confirmation_keyboard,
    get_date_selection_keyboard,
    get_main_menu_keyboard,
    get_phone_keyboard,
    get_services_keyboard,
    get_time_selection_keyboard,
)
from utils.validators import (
    validate_car_info,
    validate_comment,
    validate_name,
    validate_phone,
)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
router = Router(name="client")

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)


class ClientStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è FSM –¥–ª—è –∫–ª–∏–µ–Ω—Ç—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤"""
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    ENTER_NAME = State()  # –í–≤–æ–¥ –∏–º–µ–Ω–∏
    ENTER_PHONE = State()  # –í–≤–æ–¥ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    
    # –°–æ—Å—Ç–æ—è–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    SELECT_SERVICE = State()  # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏
    SELECT_DATE = State()  # –í—ã–±–æ—Ä –¥–∞—Ç—ã
    SELECT_TIME = State()  # –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
    ENTER_CAR = State()  # –í–≤–æ–¥ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    ENTER_COMMENT = State()  # –í–≤–æ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
    CONFIRM_APPOINTMENT = State()  # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏


class AppointmentData:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø–∏—Å–∏ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –µ—ë —Å–æ–∑–¥–∞–Ω–∏—è"""
    
    def __init__(self):
        self.service_id: Optional[int] = None
        self.service_name: Optional[str] = None
        self.date: Optional[datetime] = None
        self.time: Optional[str] = None
        self.car_info: Optional[str] = None
        self.comment: Optional[str] = None


async def get_client(message: Message, db: DatabaseManager) -> Optional[Client]:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–ª–∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞
    
    Args:
        message: —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db: –º–µ–Ω–µ–¥–∂–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        
    Returns:
        Optional[Client]: –æ–±—ä–µ–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞ –∏–ª–∏ None
    """
    return await db.get_client(message.from_user.id)


@router.message(CommandStart())
async def cmd_start(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client(message, db)
    
    if client:
        # –ö–ª–∏–µ–Ω—Ç —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω
        await message.answer(
            f"–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º, {client.name}!",
            reply_markup=get_main_menu_keyboard()
        )
    else:
        # –ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        await message.answer(
            "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:",
            reply_markup=get_cancel_keyboard()
        )
        await state.set_state(ClientStates.ENTER_NAME)


@router.message(Command("cancel"))
@router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cmd_cancel(message: Message, state: FSMContext) -> None:
    """
    –û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    """
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
    await message.answer(
        "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=get_main_menu_keyboard()
    )


@router.message(ClientStates.ENTER_NAME)
async def process_name(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏
    name = message.text.strip()
    is_valid, error = validate_name(name)
    
    if not is_valid:
        await message.answer(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
        reply_markup=get_phone_keyboard()
    )
    await state.set_state(ClientStates.ENTER_PHONE)


@router.message(ClientStates.ENTER_PHONE)
async def process_phone(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    if message.contact:
        phone = message.contact.phone_number
    else:
        phone = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    is_valid, error = validate_phone(phone)
    if not is_valid:
        await message.answer(
            f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ –∏–º—è
    data = await state.get_data()
    name = data["name"]
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    success, error, client = await db.add_client(
        telegram_id=message.from_user.id,
        name=name,
        phone=phone
    )
    
    if not success:
        await message.answer(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        await state.clear()
        return
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await message.answer(
        "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()


@router.message(F.text == "üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")
async def cmd_new_appointment(
    message: Message,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    client = await get_client(message, db)
    if not client:
        await message.answer(
            "–î–ª—è –∑–∞–ø–∏—Å–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥
    services = await db.get_active_services()
    if not services:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —Å–µ–π—á–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:",
        reply_markup=get_services_keyboard(services)
    )
    await state.set_state(ClientStates.SELECT_SERVICE)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(appointment=AppointmentData())


@router.callback_query(ClientStates.SELECT_SERVICE)
async def process_service_selection(
    callback: CallbackQuery,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏
    service_id = int(callback.data.split(":")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å–ª—É–≥–µ
    service = await db.get_service(service_id)
    if not service:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: —É—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ."
        )
        await state.clear()
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é —É—Å–ª—É–≥—É
    data = await state.get_data()
    appointment: AppointmentData = data["appointment"]
    appointment.service_id = service_id
    appointment.service_name = service.name
    await state.update_data(appointment=appointment)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏: {service.name}\n"
        "–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—É—é –¥–∞—Ç—É:",
        reply_markup=get_date_selection_keyboard(datetime.now())
    )
    await state.set_state(ClientStates.SELECT_DATE)


@router.callback_query(ClientStates.SELECT_DATE)
async def process_date_selection(
    callback: CallbackQuery,
    state: FSMContext,
    db: DatabaseManager
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    date_str = callback.data.split(":")[1]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d")
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É
    booked_times = await db.get_booked_times(selected_date)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
    data = await state.get_data()
    appointment: AppointmentData = data["appointment"]
    appointment.date = selected_date
    await state.update_data(appointment=appointment)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ–µ –≤—Ä–µ–º—è
    await callback.message.edit_text(
        f"–î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è:",
        reply_markup=get_time_selection_keyboard(selected_date, booked_times)
    )
    await state.set_state(ClientStates.SELECT_TIME)


@router.callback_query(ClientStates.SELECT_TIME)
async def process_time_selection(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")
        return
    
    if callback.data == "back_to_date":
        await callback.message.edit_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:",
            reply_markup=get_date_selection_keyboard(datetime.now())
        )
        await state.set_state(ClientStates.SELECT_DATE)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    time_str = callback.data.split(":")[1]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    data = await state.get_data()
    appointment: AppointmentData = data["appointment"]
    appointment.time = time_str
    await state.update_data(appointment=appointment)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ (–º–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å):"
    )
    await state.set_state(ClientStates.ENTER_CAR)


@router.message(ClientStates.ENTER_CAR)
async def process_car_info(
    message: Message,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    """
    car_info = message.text.strip()
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è
    is_valid, error = validate_car_info(car_info)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ:"
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–≤—Ç–æ–º–æ–±–∏–ª–µ
    data = await state.get_data()
    appointment: AppointmentData = data["appointment"]
    appointment.car_info = car_info
    await state.update_data(appointment=appointment)
    
    await show_appointment_confirmation(message, state)


async def show_appointment_confirmation(
    message: Message,
    state: FSMContext
) -> None:
    """
    –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏
    """
    data = await state.get_data()
    appointment: AppointmentData = data["appointment"]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
    time_parts = appointment.time.split(":")
    appointment_time = appointment.date.replace(
        hour=int(time_parts[0]),
        minute=int(time_parts[1])
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = (
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏:\n\n"
        f"–£—Å–ª—É–≥–∞: {appointment.service_name}\n"
        f"–î–∞—Ç–∞: {appointment_time.strftime('%d.%m.%Y')}\n"
        f"–í—Ä–µ–º—è: {appointment_time.strftime('%H:%M')}\n"
        f"–ê–≤—Ç–æ–º–æ–±–∏–ª—å: {appointment.car_info}\n"
    )
    
    if appointment.comment:
        confirmation_text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {appointment.comment}\n"
    
    confirmation_text += "\n–í—Å—ë –≤–µ—Ä–Ω–æ?"
    
    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )
    await state.set_state(ClientStates.CONFIRM_APPOINTMENT)


@router.callback_query(ClientStates.CONFIRM_APPOINTMENT)
async def process_appointment_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
    db: DatabaseManager,
    notifications: NotificationService
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–ø–∏—Å–∏
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text(
            "–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=get_main_menu_keyboard()
        )
        return
        
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
    data = await state.get_data()
    appointment_data: AppointmentData = data["appointment"]
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client(callback.message, db)
    if not client:
        await callback.message.edit_text(
            "–û—à–∏–±–∫–∞: –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–ø–∏—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ /start"
        )
        await state.clear()
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏
    time_parts = appointment_data.time.split(":")
    appointment_time = appointment_data.date.replace(
        hour=int(time_parts[0]),
        minute=int(time_parts[1])
    )
    
    # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
    success, error, appointment = await db.add_appointment(
        client_id=client.id,
        service_type=appointment_data.service_name,
        car_info=appointment_data.car_info,
        appointment_time=appointment_time,
        comment=appointment_data.comment
    )
    
    if not success:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=get_main_menu_keyboard()
        )
        await state.clear()
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await notifications.notify_new_appointment(
        appointment=appointment,
        client=client,
        admin_chat_id=int(callback.bot.config.admin_chat_id)
    )
    
    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await callback.message.edit_text(
        "‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.",
        reply_markup=get_main_menu_keyboard()
    )
    await state.clear()

@router.message(Command("contacts"))
@router.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def cmd_contacts(message: Message, db: DatabaseManager) -> None:
    """–í—ã–≤–æ–¥ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏"""
    contacts_text = await db.get_setting("contacts")
    if not contacts_text:
        contacts_text = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–Ω—Ç–∞–∫—Ç–∞—Ö –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞."
        
    await message.answer(contacts_text)

@router.message(F.text == "üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
async def cmd_my_appointments(
    message: Message,
    db: DatabaseManager
) -> None:
    """
    –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–≤–æ–∏—Ö –∑–∞–ø–∏—Å–µ–π
    """
    # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
    client = await get_client(message, db)
    if not client:
        await message.answer(
            "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–ø–∏—Å–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
        )
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
    appointments = await db.get_client_appointments(client.id)
    
    if not appointments:
        await message.answer(
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–∏—Å–µ–π.",
            reply_markup=get_main_menu_keyboard()
        )
        return
    
    # –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—ã–µ –∏ –ø—Ä–æ—à–µ–¥—à–∏–µ
    active_appointments = []
    past_appointments = []
    now = datetime.now()
    
    for apt in appointments:
        if apt.appointment_time > now and apt.status != AppointmentStatus.CANCELLED:
            active_appointments.append(apt)
        else:
            past_appointments.append(apt)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    response = []
    
    if active_appointments:
        response.append("üìÖ –ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–ø–∏—Å–∏:")
        for apt in active_appointments:
            response.append(format_appointment_info(apt))
            if apt.status == AppointmentStatus.PENDING:
                response.append("–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏.")
            response.append("")
    
    if past_appointments:
        response.append("üìÖ –ü—Ä–æ—à–µ–¥—à–∏–µ –∑–∞–ø–∏—Å–∏:")
        for apt in past_appointments[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö
            response.append(format_appointment_info(apt))
            response.append("")
    
    await message.answer(
        "\n".join(response),
        reply_markup=get_main_menu_keyboard()
    )