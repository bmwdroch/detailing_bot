"""
–ú–æ–¥—É–ª—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏ –∏ –∫–∞—Å—Å–æ–π.
–í–∫–ª—é—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–æ–º–∞–Ω–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏.
"""
import logging
from datetime import datetime, timedelta
from typing import Dict, Optional

from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from core.models import TransactionType
from services import db
from services.analytics.analytics import AnalyticsService
from services.db.database_manager import DatabaseManager
from services.notifications.notification_service import NotificationService
from utils.formatters import format_money
from utils.keyboards import (
    get_cancel_keyboard,
    get_inline_cancel_keyboard, 
    get_confirmation_keyboard,
    get_main_menu_keyboard,
    get_services_keyboard,
    get_transaction_type_keyboard,
)
from utils.validators import validate_amount, validate_category

router = Router(name="payment")
logger = logging.getLogger(__name__)

# –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞, –≤ –±–ª–æ–∫–µ –∏–º–ø–æ—Ä—Ç–∞ –∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π
class PaymentStates(StatesGroup):
    SELECT_TYPE = State()         # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    ENTER_AMOUNT = State()        # –í–≤–æ–¥ —Å—É–º–º—ã
    SELECT_SERVICE = State()      # –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏ –∏–ª–∏ "–î—Ä—É–≥–æ–µ"
    ENTER_CATEGORY = State()      # –í–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ "–î—Ä—É–≥–æ–µ")
    ENTER_DESCRIPTION = State()   # –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è
    CONFIRM_TRANSACTION = State() # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

class TransactionData:
    def __init__(self):
        self.type: Optional[TransactionType] = None
        self.amount: Optional[float] = None
        # –ù–æ–≤–æ–µ –ø–æ–ª–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —É—Å–ª—É–≥–∏ (–µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞)
        self.service_id: Optional[int] = None  
        self.category: Optional[str] = None
        self.description: Optional[str] = None

@router.message(Command("transactions"))
@router.message(F.text == "üí∞ –ö–∞—Å—Å–∞")
async def cmd_transactions(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π.
    –ò—Å–ø–æ–ª—å–∑—É–µ–º ReplyKeyboardMarkup –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.
    """
    if not await check_admin_rights(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π")
        return

    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")],
            [KeyboardButton(text="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"), KeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìã –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç")],  # —É–¥–∞–ª–µ–Ω–∞ –ª–∏—à–Ω—è—è –∫–Ω–æ–ø–∫–∞ "üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(F.text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
async def cmd_add_transaction(message: Message, state: FSMContext) -> None:
    """
    –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if not await check_admin_rights(message):
        return

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    await state.update_data(transaction=TransactionData())
    
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=get_transaction_type_keyboard()
    )
    await state.set_state(PaymentStates.SELECT_TYPE)


@router.callback_query(PaymentStates.SELECT_TYPE)
async def process_type_selection(
    callback: CallbackQuery,
    state: FSMContext
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.
    –ü—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ—Ç–º–µ–Ω—ã.
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=None
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ callback
    transaction_type = TransactionType(callback.data.split(":")[1])
    
    data = await state.get_data()
    transaction: TransactionData = data["transaction"]
    transaction.type = transaction_type
    await state.update_data(transaction=transaction)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—É–º–º—É; –∏—Å–ø–æ–ª—å–∑—É–µ–º inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –æ—Ç–º–µ–Ω—ã
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=get_inline_cancel_keyboard()
    )
    await state.set_state(PaymentStates.ENTER_AMOUNT)

@router.message(PaymentStates.ENTER_AMOUNT)
async def process_amount(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    amount = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—É–º–º—ã
    is_valid, error = validate_amount(amount)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—É–º–º—É
    data = await state.get_data()
    transaction: TransactionData = data["transaction"]
    transaction.amount = float(amount)
    await state.update_data(transaction=transaction)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥ –∏–∑ –ë–î
    # –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø –∫ –æ–±—ä–µ–∫—Ç—É –ë–î (DatabaseManager)
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ –æ–Ω –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫)
    services_list = await db.get_active_services()
    # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é, –∞–¥–∞–ø—Ç–∏—Ä—É—è –µ—ë (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–æ–±–∞–≤–∏–≤ –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ")
    keyboard = get_services_keyboard(services_list)
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É "–î—Ä—É–≥–æ–µ" –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    keyboard.inline_keyboard.append(
        [InlineKeyboardButton(text="–î—Ä—É–≥–æ–µ", callback_data="service:other")]
    )
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É, –∫ –∫–æ—Ç–æ—Ä–æ–π –æ—Ç–Ω–æ—Å–∏—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è, –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–î—Ä—É–≥–æ–µ¬ª –¥–ª—è –≤–≤–æ–¥–∞ —Å–≤–æ–µ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=keyboard
    )
    await state.set_state(PaymentStates.SELECT_SERVICE)

@router.message(PaymentStates.ENTER_CATEGORY)
async def process_category(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    """
    category = message.text.strip()

    # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    is_valid, error = validate_category(category)
    if not is_valid:
        await message.answer(
            f"–û—à–∏–±–∫–∞: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    data = await state.get_data()
    transaction: TransactionData = data["transaction"]
    transaction.category = category
    await state.update_data(transaction=transaction)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:",
        reply_markup=get_cancel_keyboard()
    )
    await state.set_state(PaymentStates.ENTER_DESCRIPTION)


@router.message(PaymentStates.ENTER_DESCRIPTION)
async def process_description(message: Message, state: FSMContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –æ–ø–∏—Å–∞–Ω–∏—è –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    description = message.text.strip()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ
    data = await state.get_data()
    transaction: TransactionData = data["transaction"]
    transaction.description = description
    await state.update_data(transaction=transaction)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    await show_transaction_confirmation(message, transaction)
    await state.set_state(PaymentStates.CONFIRM_TRANSACTION)


async def show_transaction_confirmation(
    message: Message,
    transaction: TransactionData
) -> None:
    """
    –ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    type_emoji = "üí∞" if transaction.type == TransactionType.INCOME else "üí∏"
    
    confirmation_text = (
        f"{type_emoji} –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é:\n\n"
        f"–¢–∏–ø: {transaction.type.value}\n"
        f"–°—É–º–º–∞: {format_money(transaction.amount)}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}\n"
        f"–û–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}\n\n"
        "–í—Å—ë –≤–µ—Ä–Ω–æ?"
    )

    await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard()
    )

@router.callback_query(PaymentStates.CONFIRM_TRANSACTION)
async def process_transaction_confirmation(
    callback: CallbackQuery,
    state: FSMContext,
    db: DatabaseManager,
    notifications: NotificationService  
) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    if callback.data == "cancel":
        await state.clear()
        await callback.message.edit_text(
            "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
            reply_markup=None
        )
        return

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    data = await state.get_data()
    transaction: TransactionData = data["transaction"]

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    success, error, transaction_obj = await db.add_transaction(
        amount=str(transaction.amount),
        type_=transaction.type.value,
        category=transaction.category,
        description=transaction.description
    )

    if not success:
        await callback.message.edit_text(
            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {error}\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            reply_markup=None
        )
        await state.clear()
        return

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –≤ –∞–¥–º–∏–Ω–∫—É
    admin_chat_id = callback.bot.config.admin_ids[0] if callback.bot.config.admin_ids else None
    if admin_chat_id:
        await notifications.notify_new_transaction(transaction_obj, admin_chat_id)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    await callback.message.edit_text(
        "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!",
        reply_markup=None
    )
    await state.clear()
    
@router.message(F.text == "üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç")
async def cmd_daily_report(
    message: Message,
    db: DatabaseManager,
    analytics: AnalyticsService
) -> None:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    if not await check_admin_rights(message):
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π")
        return

    today = datetime.now().replace(hour=0, minute=0, second=0, microsecond=0)
    stats = await analytics.get_daily_stats(today)

    if not stats or stats['appointments']['total'] == 0:
        await message.answer("–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.", reply_markup=get_main_menu_keyboard())
        return

    report_text = format_daily_report(stats)
    await message.answer(report_text)

@router.message(F.text == "üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")
async def cmd_weekly_report(
    message: Message,
    db: DatabaseManager,
    analytics: AnalyticsService
) -> None:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    if not await check_admin_rights(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –Ω–µ–¥–µ–ª—é
    today = datetime.now().replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    start_date = today - timedelta(days=7)
    stats = await analytics.get_period_stats(start_date, today)

    if not stats:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = format_period_report(stats, "–Ω–µ–¥–µ–ª—é")
    await message.answer(report_text)


@router.message(F.text == "üìã –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç")
async def cmd_monthly_report(
    message: Message,
    db: DatabaseManager,
    analytics: AnalyticsService
) -> None:
    """
    –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Å—è—á–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    if not await check_admin_rights(message):
        return

    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –º–µ—Å—è—Ü
    today = datetime.now().replace(
        hour=0, minute=0, second=0, microsecond=0
    )
    start_date = today - timedelta(days=30)
    stats = await analytics.get_period_stats(start_date, today)

    if not stats:
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞"
        )
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞
    report_text = format_period_report(stats, "–º–µ—Å—è—Ü")
    await message.answer(report_text)


def format_daily_report(stats: Dict) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–Ω–µ–≤–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
    """
    return (
        f"üìä –û—Ç—á–µ—Ç –∑–∞ {stats['date'].strftime('%d.%m.%Y')}\n\n"
        f"–ó–∞–ø–∏—Å–∏:\n"
        f"- –í—Å–µ–≥–æ: {stats['appointments']['total']}\n"
        f"- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['appointments']['completed']}\n"
        f"- –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['appointments']['cancelled']}\n"
        f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['appointments']['conversion']}%\n\n"
        f"–§–∏–Ω–∞–Ω—Å—ã:\n"
        f"- –î–æ—Ö–æ–¥: {format_money(stats['finances']['income'])}\n"
        f"- –†–∞—Å—Ö–æ–¥: {format_money(stats['finances']['expense'])}\n"
        f"- –ü—Ä–∏–±—ã–ª—å: {format_money(stats['finances']['profit'])}"
    )


def format_period_report(stats: Dict, period_name: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –∑–∞ –ø–µ—Ä–∏–æ–¥
    """
    return (
        f"üìà –û—Ç—á–µ—Ç –∑–∞ {period_name}\n"
        f"–ü–µ—Ä–∏–æ–¥: {stats['period']['start'].strftime('%d.%m.%Y')} - "
        f"{stats['period']['end'].strftime('%d.%m.%Y')}\n\n"
        f"–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"- –ó–∞–ø–∏—Å–µ–π: {stats['total']['appointments']}\n"
        f"- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {stats['total']['completed']}\n"
        f"- –û—Ç–º–µ–Ω–µ–Ω–æ: {stats['total']['cancelled']}\n"
        f"- –ö–æ–Ω–≤–µ—Ä—Å–∏—è: {stats['total']['conversion']}%\n\n"
        f"–§–∏–Ω–∞–Ω—Å—ã:\n"
        f"- –û–±—â–∏–π –¥–æ—Ö–æ–¥: {format_money(stats['total']['income'])}\n"
        f"- –û–±—â–∏–π —Ä–∞—Å—Ö–æ–¥: {format_money(stats['total']['expense'])}\n"
        f"- –û–±—â–∞—è –ø—Ä–∏–±—ã–ª—å: {format_money(stats['total']['profit'])}\n\n"
        f"–°—Ä–µ–¥–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:\n"
        f"- –ó–∞–ø–∏—Å–µ–π –≤ –¥–µ–Ω—å: {stats['average']['daily_appointments']}\n"
        f"- –î–æ—Ö–æ–¥ –≤ –¥–µ–Ω—å: {format_money(stats['average']['daily_income'])}\n"
        f"- –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {format_money(stats['average']['check'])}"
    )


async def check_admin_rights(message: Message) -> bool:
    try:
        user_id = message.from_user.id
        bot = message.bot
        admin_ids = bot.config.admin_ids
        return user_id in admin_ids
    except Exception as e:
        logger.error(f"Error checking admin rights: {e}")
        return False