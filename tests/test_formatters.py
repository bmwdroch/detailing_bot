import pytest
from datetime import datetime, timedelta
from decimal import Decimal

from core.models import AppointmentStatus, Transaction, Appointment, Client
from utils.formatters import (
    format_phone,
    format_money,
    format_date,
    format_time,
    format_datetime,
    format_relative_date,
    format_appointment_status,
    format_duration,
    format_client_info,
    format_appointment_info,
    format_transaction_info
)

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞
def test_format_phone():
    test_cases = [
        ("+79991234567", "+7 (999) 123-45-67"),
        ("89991234567", "+7 (999) 123-45-67"),
        ("+7 999 123 45 67", "+7 (999) 123-45-67"),
        ("8(999)1234567", "+7 (999) 123-45-67"),
    ]
    for input_phone, expected in test_cases:
        assert format_phone(input_phone) == expected

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º
def test_format_money():
    test_cases = [
        (Decimal("1000"), "1 000 ‚ÇΩ"),
        (Decimal("1000.50"), "1 000,50 ‚ÇΩ"),
        (Decimal("999999.99"), "999 999,99 ‚ÇΩ"),
        (float(1000), "1 000 ‚ÇΩ"),
        ("1000.00", "1 000 ‚ÇΩ"),
    ]
    for input_amount, expected in test_cases:
        assert format_money(input_amount) == expected

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
def test_format_date():
    dt = datetime(2025, 1, 15)
    assert format_date(dt) == "15.01.2025"

def test_format_time():
    dt = datetime(2025, 1, 15, 14, 30)
    assert format_time(dt) == "14:30"

def test_format_datetime():
    dt = datetime(2025, 1, 15, 14, 30)
    assert format_datetime(dt) == "15.01.2025 14:30"

# –¢–µ—Å—Ç—ã –¥–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞—Ç
def test_format_relative_date():
    fixed_now = datetime(2025, 1, 31, 12, 0, 0)
    test_cases = [
        (fixed_now + timedelta(minutes=30), "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç"),
        (fixed_now + timedelta(hours=2), "—á–µ—Ä–µ–∑ 2 —á–∞—Å–æ–≤"),
        ((fixed_now.replace(hour=14, minute=30) + timedelta(days=1)), "–∑–∞–≤—Ç—Ä–∞ –≤ 14:30"),
        (fixed_now - timedelta(hours=1), "1 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"),
        ((fixed_now.replace(hour=14, minute=30) - timedelta(days=1)), "–≤—á–µ—Ä–∞ –≤ 14:30"),
    ]
    for dt, expected in test_cases:
        result = format_relative_date(dt, now=fixed_now)
        assert result.startswith(expected.split(' –≤')[0])

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
def test_format_appointment_status():
    test_cases = [
        (AppointmentStatus.PENDING, "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"),
        (AppointmentStatus.CONFIRMED, "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞"),
        (AppointmentStatus.COMPLETED, "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞"),
        (AppointmentStatus.CANCELLED, "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞"),
        (AppointmentStatus.RESCHEDULED, "üìÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞"),
    ]
    for status, expected in test_cases:
        assert format_appointment_status(status) == expected

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
def test_format_duration():
    test_cases = [
        (30, "30 –º–∏–Ω—É—Ç"),
        (60, "1 —á–∞—Å"),
        (90, "1 —á–∞—Å 30 –º–∏–Ω—É—Ç"),
        (120, "2 —á–∞—Å–∞"),
        (150, "2 —á–∞—Å–∞ 30 –º–∏–Ω—É—Ç"),
    ]
    for minutes, expected in test_cases:
        assert format_duration(minutes) == expected

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–ª–∏–µ–Ω—Ç–µ
@pytest.fixture
def sample_client():
    return Client(
        id=1,
        telegram_id=123456789,
        name="–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
        phone="+79991234567",
        created_at=datetime(2025, 1, 15)
    )

def test_format_client_info(sample_client):
    expected = (
        "üë§ –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤\n"
        "üì± +7 (999) 123-45-67\n"
        "–ö–ª–∏–µ–Ω—Ç —Å 15.01.2025"
    )
    assert format_client_info(sample_client) == expected

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–ø–∏—Å–∏
@pytest.fixture
def sample_appointment():
    return Appointment(
        id=1,
        client_id=1,
        service_id=1,
        car_info="Toyota Camry",
        appointment_time=datetime(2025, 1, 15, 14, 30),
        status=AppointmentStatus.CONFIRMED,
        comment="–¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π",
        created_at=datetime(2025, 1, 14)
    )

def test_format_appointment_info(sample_appointment):
    formatted = format_appointment_info(sample_appointment)
    assert "üìÖ –ó–∞–ø–∏—Å—å #1" in formatted
    assert "üïí 15.01.2025 14:30" in formatted
    assert "üöó Toyota Camry" in formatted
    assert "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞" in formatted
    assert "üí≠ –¢–µ—Å—Ç–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π" in formatted

# –¢–µ—Å—Ç—ã –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@pytest.fixture
def sample_transaction():
    return Transaction(
        id=1,
        appointment_id=1,
        amount=Decimal("1000.50"),
        type="income",
        category="–£—Å–ª—É–≥–∏",
        description="–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥",
        created_at=datetime(2025, 1, 15, 14, 30)
    )

def test_format_transaction_info(sample_transaction):
    formatted = format_transaction_info(sample_transaction)
    assert "üí∞ 1 000,50 ‚ÇΩ" in formatted
    assert "üìÅ –£—Å–ª—É–≥–∏" in formatted
    assert "üìù –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥" in formatted
    assert "üïí 15.01.2025 14:30" in formatted