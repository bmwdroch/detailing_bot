"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —á–µ—Ä–µ–∑ Telegram.
–í–∫–ª—é—á–∞–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
"""
import logging
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Union

from aiogram import Bot
from core.models import Appointment, AppointmentStatus, Client, Transaction
from utils.formatters import (
    format_appointment_info,
    format_datetime,
    format_money,
    format_relative_date
)


class NotificationService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

    def __init__(self, bot: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        
        Args:
            bot: –æ–±—ä–µ–∫—Ç –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
        """
        self.bot = bot
        self.logger = logging.getLogger(__name__)

    async def send_message(
        self,
        chat_id: int,
        text: str,
        parse_mode: str = "HTML",
        **kwargs
    ) -> bool:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
        
        Args:
            chat_id: ID —á–∞—Ç–∞
            text: —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            parse_mode: —Ä–µ–∂–∏–º —Ä–∞–∑–º–µ—Ç–∫–∏
            **kwargs: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
        Returns:
            bool: —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–∫–∏
        """
        try:
            await self.bot.send_message(
                chat_id=chat_id,
                text=text,
                parse_mode=parse_mode,
                **kwargs
            )
            return True
        except Exception as e:
            self.logger.error(f"Error sending message to {chat_id}: {e}")
            return False

    async def notify_new_appointment(
        self,
        appointment: Appointment,
        client: Client,
        admin_chat_id: int
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∑–∞–ø–∏—Å–∏
        
        Args:
            appointment: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            client: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        admin_text = (
            "üÜï –ù–æ–≤–∞—è –∑–∞–ø–∏—Å—å!\n\n"
            f"–û—Ç: {client.name}\n"
            f"üì± {client.phone}\n\n"
            f"{format_appointment_info(appointment)}"
        )
        await self.send_message(admin_chat_id, admin_text)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∫–ª–∏–µ–Ω—Ç–∞
        client_text = (
            "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n"
            f"{format_appointment_info(appointment)}\n\n"
            "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏."
        )
        await self.send_message(client.telegram_id, client_text)

    async def notify_appointment_status_change(
        self,
        appointment: Appointment,
        client: Client,
        old_status: str,
        admin_chat_id: Optional[int] = None
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏
        
        Args:
            appointment: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            client: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            old_status: –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Å—Ç–∞—Ç—É—Å
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –¢–µ–∫—Å—Ç –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
        status_messages = {
            "confirmed": "‚úÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!",
            "cancelled": "‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            "completed": "üèÅ –£—Å–ª—É–≥–∞ –æ–∫–∞–∑–∞–Ω–∞. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ!",
            "rescheduled": "üìÖ –í–∞—à–∞ –∑–∞–ø–∏—Å—å –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞."
        }

        if appointment.status.value in status_messages:
            client_text = (
                f"{status_messages[appointment.status.value]}\n\n"
                f"{format_appointment_info(appointment)}"
            )
            await self.send_message(client.telegram_id, client_text)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω chat_id
        if admin_chat_id:
            admin_text = (
                f"üìù –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–ø–∏—Å–∏ #{appointment.id}\n"
                f"–ö–ª–∏–µ–Ω—Ç: {client.name}\n"
                f"–°—Ç–∞—Ä—ã–π —Å—Ç–∞—Ç—É—Å: {old_status}\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {appointment.status.value}\n\n"
                f"{format_appointment_info(appointment)}"
            )
            await self.send_message(admin_chat_id, admin_text)

    async def send_appointment_reminder(
        self,
        appointment: Appointment,
        client: Client,
        hours_before: int
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–ø–∏—Å–∏
        
        Args:
            appointment: –¥–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            client: –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
            hours_before: –∑–∞ —Å–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ –¥–æ –∑–∞–ø–∏—Å–∏
        """
        relative_time = format_relative_date(appointment.appointment_time)
        
        text = (
            f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏ {relative_time}!\n\n"
            f"{format_appointment_info(appointment)}\n\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏
        if hours_before >= 24:
            text += (
                "–ï—Å–ª–∏ –≤–∞–º –Ω—É–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å –∏–ª–∏ –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –∑–∞–ø–∏—Å—å, "
                "–ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –æ–± —ç—Ç–æ–º –∑–∞—Ä–∞–Ω–µ–µ."
            )
        else:
            text += (
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –æ–ø–∞–∑–¥—ã–≤–∞–π—Ç–µ. "
                "–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞, —Å–æ–æ–±—â–∏—Ç–µ –Ω–∞–º."
            )
            
        await self.send_message(client.telegram_id, text)

    async def notify_low_balance(
        self,
        balance: Union[int, float],
        admin_chat_id: int,
        threshold: Union[int, float] = 1000
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∏–∑–∫–æ–º –±–∞–ª–∞–Ω—Å–µ
        
        Args:
            balance: —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            threshold: –ø–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if balance < threshold:
            text = (
                "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –ù–∏–∑–∫–∏–π –±–∞–ª–∞–Ω—Å!\n\n"
                f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {format_money(balance)}\n"
                f"–ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: {format_money(threshold)}"
            )
            await self.send_message(admin_chat_id, text)

    async def notify_daily_summary(
        self,
        date: datetime,
        appointments: List[Appointment],
        transactions: List[Transaction],
        admin_chat_id: int
    ) -> None:
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
        
        Args:
            date: –¥–∞—Ç–∞ —Å–≤–æ–¥–∫–∏
            appointments: –∑–∞–ø–∏—Å–∏ –∑–∞ –¥–µ–Ω—å
            transactions: —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∑–∞ –¥–µ–Ω—å
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∑–∞–ø–∏—Å—è–º
        total_appointments = len(appointments)
        completed = sum(1 for a in appointments if a.status == "completed")
        cancelled = sum(1 for a in appointments if a.status == "cancelled")
        
        # –°—á–∏—Ç–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º
        income = sum(t.amount for t in transactions if t.type.value == "income")
        expense = sum(t.amount for t in transactions if t.type.value == "expense")
        profit = income - expense
        
        text = (
            f"üìä –°–≤–æ–¥–∫–∞ –∑–∞ {format_datetime(date)}\n\n"
            f"–ó–∞–ø–∏—Å–∏:\n"
            f"- –í—Å–µ–≥–æ: {total_appointments}\n"
            f"- –í—ã–ø–æ–ª–Ω–µ–Ω–æ: {completed}\n"
            f"- –û—Ç–º–µ–Ω–µ–Ω–æ: {cancelled}\n\n"
            f"–§–∏–Ω–∞–Ω—Å—ã:\n"
            f"- –î–æ—Ö–æ–¥: {format_money(income)}\n"
            f"- –†–∞—Å—Ö–æ–¥: {format_money(expense)}\n"
            f"- –ü—Ä–∏–±—ã–ª—å: {format_money(profit)}"
        )
        
        await self.send_message(admin_chat_id, text)

    async def notify_system_error(
        self,
        error: Exception,
        admin_chat_id: int,
        context: Optional[dict] = None
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –≤ —Å–∏—Å—Ç–µ–º–µ
        
        Args:
            error: –æ–±—ä–µ–∫—Ç –æ—à–∏–±–∫–∏
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            context: –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        """
        text = (
            "üö® –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞!\n\n"
            f"–¢–∏–ø: {type(error).__name__}\n"
            f"–°–æ–æ–±—â–µ–Ω–∏–µ: {str(error)}\n"
        )
        
        if context:
            text += "\n–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n"
            for key, value in context.items():
                text += f"- {key}: {value}\n"
                
        await self.send_message(admin_chat_id, text)

    async def notify_new_transaction(
        self,
        transaction: Transaction,
        admin_chat_id: int
    ) -> None:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.

        Args:
            transaction: –æ–±—ä–µ–∫—Ç Transaction
            admin_chat_id: ID —á–∞—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        """
        text = (
            "üÜï –ù–æ–≤–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è:\n\n"
            f"–°—É–º–º–∞: {format_money(transaction.amount)}\n"
            f"–¢–∏–ø: {transaction.type.value}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {transaction.category}\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {transaction.description}\n"
            f"–î–∞—Ç–∞: {format_datetime(transaction.created_at)}"
        )
        await self.send_message(admin_chat_id, text)

    async def check_and_send_reminders(
        self,
        appointments: List[Appointment],
        clients: Dict[int, Client]
    ) -> None:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö
        
        Args:
            appointments: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
            clients: —Å–ª–æ–≤–∞—Ä—å –∫–ª–∏–µ–Ω—Ç–æ–≤ {client_id: Client}
        """
        now = datetime.now()
        
        for appointment in appointments:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
            if appointment.status == AppointmentStatus.CANCELLED:
                continue
                
            # –ü–æ–ª—É—á–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞
            client = clients.get(appointment.client_id)
            if not client:
                continue
                
            time_diff = appointment.appointment_time - now
            hours_until = time_diff.total_seconds() / 3600
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞
            if 23.5 <= hours_until <= 24.5:
                await self.send_appointment_reminder(
                    appointment,
                    client,
                    hours_before=24
                )
                
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 2 —á–∞—Å–∞
            elif 1.5 <= hours_until <= 2.5:
                await self.send_appointment_reminder(
                    appointment,
                    client,
                    hours_before=2
                )