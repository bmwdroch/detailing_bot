============================= test session starts ==============================
platform linux -- Python 3.10.12, pytest-8.3.4, pluggy-1.5.0 -- /root/tgbg/myenv/bin/python3
cachedir: .pytest_cache
rootdir: /root/tgbg
configfile: pytest.ini
plugins: asyncio-0.25.3, anyio-4.8.0
asyncio: mode=auto, asyncio_default_fixture_loop_scope=None
collecting ... collected 53 items

tests/test_analytics.py::test_daily_stats ERROR                          [  1%]
tests/test_analytics.py::test_period_stats ERROR                         [  3%]
tests/test_analytics.py::test_popular_services ERROR                     [  5%]
tests/test_analytics.py::test_busy_hours ERROR                           [  7%]
tests/test_core_processes.py::test_create_appointment FAILED             [  9%]
tests/test_core_processes.py::test_appointment_status_flow FAILED        [ 11%]
tests/test_core_processes.py::test_create_transaction PASSED             [ 13%]
tests/test_core_processes.py::test_appointment_time_validation FAILED    [ 15%]
tests/test_database.py::test_add_client PASSED                           [ 16%]
tests/test_database.py::test_add_duplicate_client PASSED                 [ 18%]
tests/test_database.py::test_add_appointment ERROR                       [ 20%]
tests/test_database.py::test_update_appointment_status ERROR             [ 22%]
tests/test_database.py::test_add_transaction ERROR                       [ 24%]
tests/test_database.py::test_get_upcoming_appointments ERROR             [ 26%]
tests/test_database.py::test_get_client_appointments ERROR               [ 28%]
tests/test_formatters.py::test_format_phone PASSED                       [ 30%]
tests/test_formatters.py::test_format_money PASSED                       [ 32%]
tests/test_formatters.py::test_format_date PASSED                        [ 33%]
tests/test_formatters.py::test_format_time PASSED                        [ 35%]
tests/test_formatters.py::test_format_datetime PASSED                    [ 37%]
tests/test_formatters.py::test_format_relative_date PASSED               [ 39%]
tests/test_formatters.py::test_format_appointment_status PASSED          [ 41%]
tests/test_formatters.py::test_format_duration PASSED                    [ 43%]
tests/test_formatters.py::test_format_client_info PASSED                 [ 45%]
tests/test_formatters.py::test_format_appointment_info PASSED            [ 47%]
tests/test_formatters.py::test_format_transaction_info PASSED            [ 49%]
tests/test_integration.py::test_full_appointment_flow FAILED             [ 50%]
tests/test_integration.py::test_error_handling FAILED                    [ 52%]
tests/test_integration.py::test_concurrent_operations FAILED             [ 54%]
tests/test_load.py::test_concurrent_client_creation PASSED               [ 56%]
tests/test_load.py::test_concurrent_appointments FAILED                  [ 58%]
tests/test_load.py::test_database_recovery PASSED                        [ 60%]
tests/test_load.py::test_high_load_queries PASSED                        [ 62%]
tests/test_notifications.py::test_notify_new_appointment ERROR           [ 64%]
tests/test_notifications.py::test_notify_status_change ERROR             [ 66%]
tests/test_notifications.py::test_send_appointment_reminder ERROR        [ 67%]
tests/test_validators.py::test_valid_phone_numbers PASSED                [ 69%]
tests/test_validators.py::test_invalid_phone_numbers PASSED              [ 71%]
tests/test_validators.py::test_valid_names PASSED                        [ 73%]
tests/test_validators.py::test_invalid_names PASSED                      [ 75%]
tests/test_validators.py::test_valid_car_info PASSED                     [ 77%]
tests/test_validators.py::test_invalid_car_info PASSED                   [ 79%]
tests/test_validators.py::test_valid_appointment_times PASSED            [ 81%]
tests/test_validators.py::test_invalid_appointment_times PASSED          [ 83%]
tests/test_validators.py::test_valid_amounts PASSED                      [ 84%]
tests/test_validators.py::test_invalid_amounts PASSED                    [ 86%]
tests/test_validators.py::test_validate_status PASSED                    [ 88%]
tests/test_validators.py::test_validate_transaction_type PASSED          [ 90%]
tests/test_validators.py::test_validate_category PASSED                  [ 92%]
tests/test_validators.py::test_validate_service_name PASSED              [ 94%]
tests/test_validators.py::test_validate_service_description PASSED       [ 96%]
tests/test_validators.py::test_validate_service_price PASSED             [ 98%]
tests/test_validators.py::test_validate_service_duration PASSED          [100%]

==================================== ERRORS ====================================
______________________ ERROR at setup of test_daily_stats ______________________

request = <SubRequest 'test_service' for <Coroutine test_daily_stats>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c735706d0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c73717010>
context = <_contextvars.Context object at 0x7f7c7356cac0>
setup_task = <Task finished name='Task-4' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c735706d0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .918420
_____________________ ERROR at setup of test_period_stats ______________________

request = <SubRequest 'test_service' for <Coroutine test_period_stats>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72b678b0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735cec20>
context = <_contextvars.Context object at 0x7f7c736d29c0>
setup_task = <Task finished name='Task-10' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72b678b0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .082604
___________________ ERROR at setup of test_popular_services ____________________

request = <SubRequest 'test_service' for <Coroutine test_popular_services>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72bb7520>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735cef80>
context = <_contextvars.Context object at 0x7f7c736ab200>
setup_task = <Task finished name='Task-16' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72bb7520>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .315230
______________________ ERROR at setup of test_busy_hours _______________________

request = <SubRequest 'test_service' for <Coroutine test_busy_hours>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72b3f4f0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c73716c20>
context = <_contextvars.Context object at 0x7f7c736abfc0>
setup_task = <Task finished name='Task-22' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72b3f4f0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .407511
____________________ ERROR at setup of test_add_appointment ____________________

request = <SubRequest 'test_service' for <Coroutine test_add_appointment>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c737e67d0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735ce830>
context = <_contextvars.Context object at 0x7f7c73892d40>
setup_task = <Task finished name='Task-51' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c737e67d0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .556733
_______________ ERROR at setup of test_update_appointment_status _______________

request = <SubRequest 'test_service' for <Coroutine test_update_appointment_status>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c737fea70>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c73717370>
context = <_contextvars.Context object at 0x7f7c7372d980>
setup_task = <Task finished name='Task-56' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c737fea70>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .635889
____________________ ERROR at setup of test_add_transaction ____________________

request = <SubRequest 'test_service' for <Coroutine test_add_transaction>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c737e59c0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735cef80>
context = <_contextvars.Context object at 0x7f7c736abec0>
setup_task = <Task finished name='Task-61' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c737e59c0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .843784
_______________ ERROR at setup of test_get_upcoming_appointments _______________

request = <SubRequest 'test_service' for <Coroutine test_get_upcoming_appointments>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72c0be20>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c7369c310>
context = <_contextvars.Context object at 0x7f7c7371b240>
setup_task = <Task finished name='Task-66' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72c0be20>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .911856
________________ ERROR at setup of test_get_client_appointments ________________

request = <SubRequest 'test_service' for <Coroutine test_get_client_appointments>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72baba90>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c73716ef0>
context = <_contextvars.Context object at 0x7f7c72c527c0>
setup_task = <Task finished name='Task-71' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defined at /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72baba90>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .991055
________________ ERROR at setup of test_notify_new_appointment _________________

request = <SubRequest 'test_service' for <Coroutine test_notify_new_appointment>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c72c38d00>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735e8ee0>
context = <_contextvars.Context object at 0x7f7c72c54280>
setup_task = <Task finished name='Task-1200' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defin...t /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72c38d00>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .892911
_________________ ERROR at setup of test_notify_status_change __________________

request = <SubRequest 'test_service' for <Coroutine test_notify_status_change>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c737ff250>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735e9000>
context = <_contextvars.Context object at 0x7f7c72c549c0>
setup_task = <Task finished name='Task-1206' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defin...t /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c737ff250>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .975713
_______________ ERROR at setup of test_send_appointment_reminder _______________

request = <SubRequest 'test_service' for <Coroutine test_send_appointment_reminder>>
kwargs = {'test_db': <services.db.database_manager.DatabaseManager object at 0x7f7c737039d0>}
event_loop_fixture_id = 'event_loop'
setup = <function _wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup at 0x7f7c735e9120>
context = <_contextvars.Context object at 0x7f7c72c558c0>
setup_task = <Task finished name='Task-1212' coro=<_wrap_async_fixture.<locals>._async_fixture_wrapper.<locals>.setup() done, defin...t /root/tgbg/myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:369> exception=AssertionError('assert False')>

    @functools.wraps(fixture)
    def _async_fixture_wrapper(request: FixtureRequest, **kwargs: Any):
        func = _perhaps_rebind_fixture_func(fixture, request.instance)
        event_loop_fixture_id = _get_event_loop_fixture_id_for_async_fixture(
            request, func
        )
        event_loop = request.getfixturevalue(event_loop_fixture_id)
        kwargs.pop(event_loop_fixture_id, None)
    
        async def setup():
            res = await func(**_add_kwargs(func, kwargs, event_loop, request))
            return res
    
        context = contextvars.copy_context()
        setup_task = _create_task_in_context(event_loop, setup(), context)
>       result = event_loop.run_until_complete(setup_task)

myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:375: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/lib/python3.10/asyncio/base_events.py:649: in run_until_complete
    return future.result()
myenv/lib/python3.10/site-packages/pytest_asyncio/plugin.py:370: in setup
    res = await func(**_add_kwargs(func, kwargs, event_loop, request))
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c737039d0>

    @pytest.fixture
    async def test_service(test_db) -> Service:
        """Создает тестовую услугу"""
        success, _, service = await test_db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000.00",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/conftest.py:64: AssertionError
------------------------------ Captured log setup ------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .045827
=================================== FAILURES ===================================
___________________________ test_create_appointment ____________________________

db = <services.db.database_manager.DatabaseManager object at 0x7f7c72bb5f60>
test_client = Client(id=1, telegram_id=123456789, name='Тест Тестов', phone='+79991234567', created_at=datetime.datetime(2025, 1, 31, 23, 6, 18))

    @pytest.mark.asyncio
    async def test_create_appointment(db, test_client):
        service_success, _, service = await db.add_service(
            name="Тестовая услуга",
            description="Описание тестовой услуги",  # изменено с "Описание" на более длинное
            price="1000",
            duration=60,
            is_active=True
        )
>       assert service_success
E       assert False

tests/test_core_processes.py:36: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .494031
_________________________ test_appointment_status_flow _________________________

db = <services.db.database_manager.DatabaseManager object at 0x7f7c72c5e560>
test_client = Client(id=1, telegram_id=123456789, name='Тест Тестов', phone='+79991234567', created_at=datetime.datetime(2025, 1, 31, 23, 6, 18))

    @pytest.mark.asyncio
    async def test_appointment_status_flow(db, test_client):
        # Добавляем услугу для корректного создания записи
        service_success, _, service = await db.add_service(
            name="Тест",
            description="Описание тестовой услуги",
            price="1000",
            duration=60,
            is_active=True
        )
>       assert service_success
E       assert False

tests/test_core_processes.py:63: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .506785
_______________________ test_appointment_time_validation _______________________

db = <services.db.database_manager.DatabaseManager object at 0x7f7c72bb7640>
test_client = Client(id=1, telegram_id=123456789, name='Тест Тестов', phone='+79991234567', created_at=datetime.datetime(2025, 1, 31, 23, 6, 18))

    @pytest.mark.asyncio
    async def test_appointment_time_validation(db, test_client):
        appointment_time = datetime.now() + timedelta(days=1)
    
        # Добавляем услугу с именем "Тест" для успешного поиска
        service_success, service_error, service = await db.add_service(
            name="Тест",
            description="Описание тестовой услуги",
            price="1000",
            duration=60,
            is_active=True
        )
>       assert service_success, f"Ошибка добавления услуги: {service_error}"
E       AssertionError: Ошибка добавления услуги: Ошибка при добавлении услуги
E       assert False

tests/test_core_processes.py:108: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .528050
__________________________ test_full_appointment_flow __________________________

services = {'analytics': <services.analytics.analytics.AnalyticsService object at 0x7f7c73540040>, 'db': <services.db.database_ma...73540af0>, 'notifications': <services.notifications.notification_service.NotificationService object at 0x7f7c735418d0>}

    @pytest.mark.asyncio
    async def test_full_appointment_flow(services):
        db = services['db']
        notifications = services['notifications']
        analytics = services['analytics']
        mock_bot = services['mock_bot']
        success, _, client = await db.add_client(
            telegram_id=123456789,
            name="Test Client",
            phone="+79991234567"
        )
        assert success
        success, _, service = await db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000",
            duration=60,
            is_active=True
        )
>       assert success
E       assert False

tests/test_integration.py:61: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .076801
_____________________________ test_error_handling ______________________________

services = {'analytics': <services.analytics.analytics.AnalyticsService object at 0x7f7c73702440>, 'db': <services.db.database_ma...73703070>, 'notifications': <services.notifications.notification_service.NotificationService object at 0x7f7c73703c70>}

    @pytest.mark.asyncio
    async def test_error_handling(services):
        """Тест обработки ошибок"""
    
        db = services['db']
    
        # Тест дублирования клиента
        success1, _, _ = await db.add_client(
            telegram_id=123456789,
            name="Test Client",
            phone="+79991234567"
        )
        assert success1
    
        success2, error, _ = await db.add_client(
            telegram_id=123456789,
            name="Test Client 2",
            phone="+79991234567"
        )
        assert not success2
        assert error is not None
    
        # Тест некорректного ID записи
        success, error = await db.update_appointment_status(
            9999,
            AppointmentStatus.CONFIRMED
        )
>       assert not success
E       assert not True

tests/test_integration.py:119: AssertionError
__________________________ test_concurrent_operations __________________________

services = {'analytics': <services.analytics.analytics.AnalyticsService object at 0x7f7c72c0a5c0>, 'db': <services.db.database_ma...735410f0>, 'notifications': <services.notifications.notification_service.NotificationService object at 0x7f7c72c095d0>}

    @pytest.mark.asyncio
    async def test_concurrent_operations(services):
        db = services['db']
        success, _, client = await db.add_client(
            telegram_id=123456789,
            name="Test Client",
            phone="+79991234567"
        )
        assert success
        # Добавляем услугу "Test Service"
        service_success, service_error, service = await db.add_service(
            name="Test Service",
            description="Test Description",
            price="1000",
            duration=60,
            is_active=True
        )
>       assert service_success, f"Ошибка добавления услуги: {service_error}"
E       AssertionError: Ошибка добавления услуги: Ошибка при добавлении услуги
E       assert False

tests/test_integration.py:139: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .096436
_________________________ test_concurrent_appointments _________________________

test_db = <services.db.database_manager.DatabaseManager object at 0x7f7c72c40e50>
sample_client_data = [(0, 'Test Client 0', '+79990000000'), (1, 'Test Client 1', '+79990000001'), (2, 'Test Client 2', '+79990000002'), (3, 'Test Client 3', '+79990000003'), (4, 'Test Client 4', '+79990000004'), (5, 'Test Client 5', '+79990000005'), ...]
sample_appointment_data = [{'appointment_time': datetime.datetime(2025, 2, 1, 10, 0), 'car_info': 'Car 0', 'comment': 'Comment 0', 'service_type...: datetime.datetime(2025, 2, 1, 15, 0), 'car_info': 'Car 5', 'comment': 'Comment 5', 'service_type': 'Service 0'}, ...]

    @pytest.mark.asyncio
    async def test_concurrent_appointments(test_db, sample_client_data, sample_appointment_data):
        """Тест параллельного создания записей"""
    
        # Сначала создаем клиента
        success, _, client = await test_db.add_client(
            telegram_id=123456789,
            name="Test Client",
            phone="+79991234567"
        )
        assert success
    
        # Добавляем услуги для всех возможных service_type ("Service 0" ... "Service 4")
        for i in range(5):
            s_success, s_error, _ = await test_db.add_service(
                name=f"Service {i}",
                description="Test service",
                price="1000",
                duration=60,
                is_active=True
            )
>           assert s_success, f"Ошибка добавления услуги Service {i}: {s_error}"
E           AssertionError: Ошибка добавления услуги Service 0: Ошибка при добавлении услуги
E           assert False

tests/test_load.py:79: AssertionError
------------------------------ Captured log call -------------------------------
ERROR    services.db.database_manager:database_manager.py:622 Error adding service: unconverted data remains: .743451
=============================== warnings summary ===============================
tests/test_integration.py:26
  /root/tgbg/tests/test_integration.py:26: PytestRemovedIn9Warning: Marks applied to fixtures have no effect
  See docs: https://docs.pytest.org/en/stable/deprecations.html#applying-a-mark-to-a-fixture-function
    async def services():

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tests/test_core_processes.py::test_create_appointment - assert False
FAILED tests/test_core_processes.py::test_appointment_status_flow - assert False
FAILED tests/test_core_processes.py::test_appointment_time_validation - Asser...
FAILED tests/test_integration.py::test_full_appointment_flow - assert False
FAILED tests/test_integration.py::test_error_handling - assert not True
FAILED tests/test_integration.py::test_concurrent_operations - AssertionError...
FAILED tests/test_load.py::test_concurrent_appointments - AssertionError: Оши...
ERROR tests/test_analytics.py::test_daily_stats - assert False
ERROR tests/test_analytics.py::test_period_stats - assert False
ERROR tests/test_analytics.py::test_popular_services - assert False
ERROR tests/test_analytics.py::test_busy_hours - assert False
ERROR tests/test_database.py::test_add_appointment - assert False
ERROR tests/test_database.py::test_update_appointment_status - assert False
ERROR tests/test_database.py::test_add_transaction - assert False
ERROR tests/test_database.py::test_get_upcoming_appointments - assert False
ERROR tests/test_database.py::test_get_client_appointments - assert False
ERROR tests/test_notifications.py::test_notify_new_appointment - assert False
ERROR tests/test_notifications.py::test_notify_status_change - assert False
ERROR tests/test_notifications.py::test_send_appointment_reminder - assert False
============== 7 failed, 34 passed, 1 warning, 12 errors in 2.41s ==============
