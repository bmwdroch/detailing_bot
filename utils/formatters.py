"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
–í–∫–ª—é—á–∞–µ—Ç —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç, –≤—Ä–µ–º–µ–Ω–∏, –¥–µ–Ω–µ–∂–Ω—ã—Ö —Å—É–º–º –∏ —Å—Ç–∞—Ç—É—Å–æ–≤.
"""
from datetime import datetime, timedelta
from decimal import Decimal
from typing import Union, Optional

from core.models import AppointmentStatus, Transaction, Appointment, Client


def format_phone(phone: str) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥
    
    Args:
        phone: –Ω–æ–º–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ +7XXXXXXXXXX –∏–ª–∏ 8XXXXXXXXXX
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–æ–º–µ—Ä, –Ω–∞–ø—Ä–∏–º–µ—Ä +7 (999) 123-45-67
    """
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ —Ü–∏—Ñ—Ä—ã
    digits = ''.join(filter(str.isdigit, phone))
    
    # –î–æ–±–∞–≤–ª—è–µ–º +7 –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å 8
    if digits.startswith('8'):
        digits = '7' + digits[1:]
    
    return f"+{digits[0]} ({digits[1:4]}) {digits[4:7]}-{digits[7:9]}-{digits[9:11]}"


def format_money(amount: Union[Decimal, float, str]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–µ–Ω–µ–∂–Ω—É—é —Å—É–º–º—É
    
    Args:
        amount: —Å—É–º–º–∞ –∫–∞–∫ Decimal, float –∏–ª–∏ —Å—Ç—Ä–æ–∫–∞
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—É–º–º–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä 1 234,56 ‚ÇΩ
    """
    if isinstance(amount, str):
        amount = Decimal(amount)
    elif isinstance(amount, float):
        amount = Decimal(str(amount))

    # –û–∫—Ä—É–≥–ª—è–µ–º –¥–æ 2 –∑–Ω–∞–∫–æ–≤ –∏ —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏
    amount = amount.quantize(Decimal("1.00")).normalize()
    formatted = f"{amount:,.2f}".replace(",", " ").replace(".", ",")
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –Ω—É–ª–∏ –ø–æ—Å–ª–µ –∑–∞–ø—è—Ç–æ–π, –µ—Å–ª–∏ —Å—É–º–º–∞ —Ü–µ–ª–∞—è
    if formatted.endswith(",00"):
        formatted = formatted[:-3]
    
    return f"{formatted} ‚ÇΩ"


def format_date(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É
    
    Args:
        dt: –æ–±—ä–µ–∫—Ç datetime
        
    Returns:
        str: –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.YYYY
    """
    return dt.strftime("%d.%m.%Y")


def format_time(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è
    
    Args:
        dt: –æ–±—ä–µ–∫—Ç datetime
        
    Returns:
        str: –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú
    """
    return dt.strftime("%H:%M")


def format_datetime(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    
    Args:
        dt: –æ–±—ä–µ–∫—Ç datetime
        
    Returns:
        str: –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.YYYY –ß–ß:–ú–ú
    """
    return f"{format_date(dt)} {format_time(dt)}"


def format_relative_date(dt: datetime, now: Optional[datetime] = None) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏.
    –ù–∞–ø—Ä–∏–º–µ—Ä: "—á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç", "—á–µ—Ä–µ–∑ 2 —á–∞—Å–æ–≤", "–∑–∞–≤—Ç—Ä–∞ –≤ 14:30", "1 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥", "–≤—á–µ—Ä–∞ –≤ 14:30"
    """
    if now is None:
        now = datetime.now().replace(microsecond=0)
    diff = dt - now
    if diff.total_seconds() >= 0:
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ —Å–µ–≥–æ–¥–Ω—è
        if dt.date() != now.date():
            if dt.date() == (now.date() + timedelta(days=1)):
                return f"–∑–∞–≤—Ç—Ä–∞ –≤ {dt.strftime('%H:%M')}"
            else:
                return dt.strftime("%d.%m.%Y %H:%M")
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å —Å–µ–≥–æ–¥–Ω—è ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —á–µ—Ä–µ–∑ —Å–∫–æ–ª—å–∫–æ
        if diff < timedelta(minutes=60):
            minutes = int(diff.total_seconds() // 60)
            return f"—á–µ—Ä–µ–∑ {minutes} –º–∏–Ω—É—Ç"
        else:
            hours = int(diff.total_seconds() // 3600)
            return f"—á–µ—Ä–µ–∑ {hours} —á–∞—Å–æ–≤"
    else:
        diff = -diff
        if diff < timedelta(minutes=60):
            minutes = int(diff.total_seconds() // 60)
            return f"{minutes} –º–∏–Ω—É—Ç –Ω–∞–∑–∞–¥"
        elif dt.date() == (now.date() - timedelta(days=1)):
            return f"–≤—á–µ—Ä–∞ –≤ {dt.strftime('%H:%M')}"
        else:
            hours = int(diff.total_seconds() // 3600)
            return f"{hours} —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥"


def format_appointment_status(status: AppointmentStatus) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    
    Args:
        status: –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ AppointmentStatus
        
    Returns:
        str: —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º—ã–π —Å—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    """
    status_map = {
        AppointmentStatus.PENDING: "üïí –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
        AppointmentStatus.CONFIRMED: "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞",
        AppointmentStatus.COMPLETED: "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–∞",
        AppointmentStatus.CANCELLED: "‚ùå –û—Ç–º–µ–Ω–µ–Ω–∞",
        AppointmentStatus.RESCHEDULED: "üìÖ –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞"
    }
    return status_map.get(status, str(status))


def format_client_info(client: Client) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
    
    Args:
        client: –æ–±—ä–µ–∫—Ç Client
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ
    """
    return (
        f"üë§ {client.name}\n"
        f"üì± {format_phone(client.phone)}\n"
        f"–ö–ª–∏–µ–Ω—Ç —Å {format_date(client.created_at)}"
    )


def format_appointment_info(appointment: Appointment, include_client: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
    
    Args:
        appointment: –æ–±—ä–µ–∫—Ç Appointment
        include_client: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–µ–Ω—Ç–µ
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø–∏—Å–∏
    """
    result = (
        f"üìÖ –ó–∞–ø–∏—Å—å #{appointment.id}\n"
        f"üïí {format_datetime(appointment.appointment_time)}\n"
        f"üöó {appointment.car_info}\n"
        f"üõ† –£—Å–ª—É–≥–∞ #{appointment.service_id}\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º service_id
        f"üìä {format_appointment_status(appointment.status)}"
    )
    
    if appointment.comment:
        result += f"\nüí≠ {appointment.comment}"
        
    if include_client:
        result = f"–ö–ª–∏–µ–Ω—Ç #{appointment.client_id}\n" + result
        
    return result


def format_transaction_info(transaction: Transaction, include_appointment: bool = False) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    
    Args:
        transaction: –æ–±—ä–µ–∫—Ç Transaction
        include_appointment: –≤–∫–ª—é—á–∞—Ç—å –ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø–∏—Å–∏
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    """
    # –í—ã–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞
    emoji = "üí∞" if transaction.type == "income" else "üí∏"
    
    result = (
        f"{emoji} {format_money(transaction.amount)}\n"
        f"üìÅ {transaction.category}\n"
        f"üìù {transaction.description}\n"
        f"üïí {format_datetime(transaction.created_at)}"
    )
    
    if include_appointment and transaction.appointment_id:
        result = f"–ó–∞–ø–∏—Å—å #{transaction.appointment_id}\n" + result
        
    return result


def format_time_slot(dt: datetime) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ–π —Å–ª–æ—Ç –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–ø–∏—Å–∏
    
    Args:
        dt: –æ–±—ä–µ–∫—Ç datetime
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –∫–Ω–æ–ø–∫–∏
    """
    return format_time(dt)


def format_duration(minutes: int) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    Args:
        minutes: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–Ω—É—Ç
        
    Returns:
        str: –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å, –Ω–∞–ø—Ä–∏–º–µ—Ä "1 —á–∞—Å 30 –º–∏–Ω—É—Ç"
    """
    hours = minutes // 60
    remaining_minutes = minutes % 60
    
    parts = []
    if hours > 0:
        parts.append(f"{hours} —á–∞—Å{'–∞' if 2 <= hours <= 4 else '–æ–≤' if hours >= 5 else ''}")
    if remaining_minutes > 0:
        parts.append(f"{remaining_minutes} –º–∏–Ω—É—Ç{'–∞' if 2 <= remaining_minutes <= 4 else '' if remaining_minutes == 1 else ''}")
        
    return " ".join(parts)