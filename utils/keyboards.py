"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""
from datetime import datetime, timedelta
from typing import List, Optional, Sequence, Dict, Any

from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)

from core.models import AppointmentStatus, Service
from utils.formatters import format_date, format_money, format_time


def get_phone_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True))
    return keyboard


def get_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞
    
    Args:
        is_admin: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(KeyboardButton("üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É"))
    keyboard.add(KeyboardButton("üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏"))
    
    if is_admin:
        keyboard.add(KeyboardButton("üë• –í—Å–µ –∑–∞–ø–∏—Å–∏"))
        keyboard.add(KeyboardButton("üí∞ –ö–∞—Å—Å–∞"), KeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"))
        
    return keyboard


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    return ReplyKeyboardMarkup(resize_keyboard=True).add(KeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"))


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    keyboard = InlineKeyboardMarkup()
    keyboard.row(
        InlineKeyboardButton("‚úÖ –î–∞", callback_data="confirm"),
        InlineKeyboardButton("‚ùå –ù–µ—Ç", callback_data="cancel")
    )
    return keyboard


def get_services_keyboard(services: List[Service]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    
    Args:
        services: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    service_buttons = [
        (f"{s.name} - {format_money(s.price)}", f"service:{s.id}")
        for s in services if s.is_active
    ]
    service_buttons.append(("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel"))
    keyboard.add(*[InlineKeyboardButton(text, callback_data=data) for text, data in services])
    return keyboard


def get_date_selection_keyboard(start_date: datetime) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã
    
    Args:
        start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    """
    keyboard = InlineKeyboardMarkup(row_width=3)
    dates = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 14 –¥–Ω–µ–π
    for i in range(14):
        current_date = start_date + timedelta(days=i)
        text = format_date(current_date)
        callback_data = f"date:{current_date.strftime('%Y-%m-%d')}"
        dates.append(InlineKeyboardButton(text, callback_data=callback_data))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(dates), 3):
        keyboard.row(*dates[i:i+3])
        
    keyboard.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return keyboard


def get_time_selection_keyboard(date: datetime, booked_times: List[datetime]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
    
    Args:
        date: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        booked_times: —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    """
    keyboard = InlineKeyboardMarkup(row_width=4)
    times = []
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã —Å 9:00 –¥–æ 20:00
    start_hour = 9
    end_hour = 20
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–ª–æ—Ç—ã
    for hour in range(start_hour, end_hour):
        for minute in [0, 30]:  # –ò–Ω—Ç–µ—Ä–≤–∞–ª 30 –º–∏–Ω—É—Ç
            slot_time = date.replace(hour=hour, minute=minute)
            
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–µ–µ –≤—Ä–µ–º—è
            if slot_time <= datetime.now():
                continue
                
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
            if slot_time in booked_times:
                continue
                
            text = format_time(slot_time)
            callback_data = f"time:{slot_time.strftime('%H:%M')}"
            times.append(InlineKeyboardButton(text, callback_data=callback_data))
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ 4 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    for i in range(0, len(times), 4):
        keyboard.row(*times[i:i+4])
        
    keyboard.row(
        InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date"),
        InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    )
    return keyboard


def get_appointment_actions_keyboard(appointment_id: int, status: AppointmentStatus) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é
    
    Args:
        appointment_id: ID –∑–∞–ø–∏—Å–∏
        status: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    """
    keyboard = InlineKeyboardMarkup(row_width=2)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if status == AppointmentStatus.PENDING:
        keyboard.row(
            InlineKeyboardButton(
                "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",
                callback_data=f"appointment:confirm:{appointment_id}"
            ),
            InlineKeyboardButton(
                "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
                callback_data=f"appointment:cancel:{appointment_id}"
            )
        )
    elif status == AppointmentStatus.CONFIRMED:
        keyboard.row(
            InlineKeyboardButton(
                "üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ",
                callback_data=f"appointment:complete:{appointment_id}"
            ),
            InlineKeyboardButton(
                "üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏",
                callback_data=f"appointment:reschedule:{appointment_id}"
            )
        )
        keyboard.row(InlineKeyboardButton(
            "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å",
            callback_data=f"appointment:cancel:{appointment_id}"
        ))
    
    return keyboard


def get_transaction_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    keyboard.row(
        InlineKeyboardButton("üí∞ –ü—Ä–∏—Ö–æ–¥", callback_data="transaction:income"),
        InlineKeyboardButton("üí∏ –†–∞—Å—Ö–æ–¥", callback_data="transaction:expense")
    )
    keyboard.row(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel"))
    return keyboard


def get_pagination_keyboard(
    page: int,
    total_pages: int,
    prefix: str,
    items_per_page: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    
    Args:
        page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        items_per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    keyboard = InlineKeyboardMarkup()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    buttons = []
    
    if page > 1:
        buttons.append(InlineKeyboardButton(
            "‚óÄÔ∏è", callback_data=f"{prefix}:{page-1}"
        ))
    
    buttons.append(InlineKeyboardButton(
        f"{page}/{total_pages}", callback_data="ignore"
    ))
    
    if page < total_pages:
        buttons.append(InlineKeyboardButton(
            "‚ñ∂Ô∏è", callback_data=f"{prefix}:{page+1}"
        ))
    
    keyboard.row(*buttons)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –µ—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω items_per_page
    if items_per_page:
        keyboard.row(
            *[InlineKeyboardButton(
                f"{n}Ô∏è‚É£", callback_data=f"{prefix}:per_page:{n}"
            ) for n in [10, 20, 50]]
        )
    
    keyboard.row(InlineKeyboardButton("‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close"))
    return keyboard