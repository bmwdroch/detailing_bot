# utils/keyboards.py
"""
–ú–æ–¥—É–ª—å —Å–æ–¥–µ—Ä–∂–∏—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä Telegram –±–æ—Ç–∞.
–í–∫–ª—é—á–∞–µ—Ç —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
"""

from datetime import datetime, timedelta
from typing import List, Optional

from aiogram.types import (
    InlineKeyboardButton, InlineKeyboardMarkup,
    KeyboardButton, ReplyKeyboardMarkup, ReplyKeyboardRemove
)
from core.models import AppointmentStatus, Service
from utils.formatters import format_date, format_money, format_time


def get_phone_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True
    )


def get_main_menu_keyboard(is_admin: bool = False) -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞

    Args:
        is_admin: —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    """
    buttons = [
        [KeyboardButton(text="üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É")],
        [KeyboardButton(text="üìÖ –ú–æ–∏ –∑–∞–ø–∏—Å–∏")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")]
    ]
    if is_admin:
        buttons.append([KeyboardButton(text="üë• –í—Å–µ –∑–∞–ø–∏—Å–∏")])
        buttons.append([KeyboardButton(text="üí∞ –ö–∞—Å—Å–∞")])
    return ReplyKeyboardMarkup(
        keyboard=buttons,
        resize_keyboard=True
    )

def get_cancel_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å' –∏ 'üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'."""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å"), KeyboardButton(text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

def get_inline_cancel_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
    )

def get_admin_menu_keyboard() -> ReplyKeyboardMarkup:
    """–°–æ–∑–¥–∞—ë—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üë• –í—Å–µ –∑–∞–ø–∏—Å–∏"), KeyboardButton(text="üí∞ –ö–∞—Å—Å–∞")],
            [KeyboardButton(text="üìù –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∞–º–∏")],
            [KeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞")]
        ],
        resize_keyboard=True
    )


def get_payment_menu_keyboard() -> ReplyKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Å—Å–æ–π (—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –æ—Ç—á—ë—Ç—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞).
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")],
            [KeyboardButton(text="üìä –î–Ω–µ–≤–Ω–æ–π –æ—Ç—á–µ—Ç"), KeyboardButton(text="üìà –ù–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç")],
            [KeyboardButton(text="üìã –ú–µ—Å—è—á–Ω—ã–π –æ—Ç—á–µ—Ç"), KeyboardButton(text="üîç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")],
            [KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]
        ],
        resize_keyboard=True
    )


def get_cancel_keyboard() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã"""
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
        resize_keyboard=True
    )


def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"""
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –î–∞", callback_data="confirm"),
            InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)


def get_services_keyboard(services: List[Service]) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏

    Args:
        services: —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—Å–ª—É–≥
    """
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞—Ä (—Ç–µ–∫—Å—Ç, callback_data)
    service_buttons = [
        (f"{s.name} - {format_money(s.price)}", f"service:{s.id}")
        for s in services if s.is_active
    ]
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã
    service_buttons.append(("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel"))

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥
    buttons = []
    for i in range(0, len(service_buttons), 2):
        row = [InlineKeyboardButton(text=text, callback_data=data)
               for text, data in service_buttons[i:i+2]]
        buttons.append(row)
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)


def get_date_selection_keyboard(start_date: datetime) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã

    Args:
        start_date: –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞
    """
    buttons = []
    temp_row = []
    for i in range(14):
        current_date = start_date + timedelta(days=i)
        btn = InlineKeyboardButton(
            text=format_date(current_date),
            callback_data=f"date:{current_date.strftime('%Y-%m-%d')}"
        )
        temp_row.append(btn)
        if (i + 1) % 3 == 0:
            buttons.append(temp_row)
            temp_row = []
    if temp_row:
        buttons.append(temp_row)
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ä—è–¥—É
    buttons.append([InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")])
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=3)


def get_time_selection_keyboard(date: datetime, booked_times: List[datetime]) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏

    Args:
        date: –≤—ã–±—Ä–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
        booked_times: —Å–ø–∏—Å–æ–∫ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –≤—Ä–µ–º–µ–Ω
    """
    buttons = []
    temp_row = []
    start_hour = 9
    end_hour = 20
    for hour in range(start_hour, end_hour):
        for minute in [0, 30]:
            slot_time = date.replace(hour=hour, minute=minute)
            if slot_time <= datetime.now():
                continue
            if slot_time in booked_times:
                continue
            btn = InlineKeyboardButton(
                text=format_time(slot_time),
                callback_data=f"time:{slot_time.strftime('%H:%M')}"
            )
            temp_row.append(btn)
            if len(temp_row) == 4:
                buttons.append(temp_row)
                temp_row = []
    if temp_row:
        buttons.append(temp_row)
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∏–∂–Ω–∏–π —Ä—è–¥ —Å –∫–Ω–æ–ø–∫–∞–º–∏ "–ù–∞–∑–∞–¥" –∏ "–û—Ç–º–µ–Ω–∏—Ç—å"
    buttons.append([
        InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_date"),
        InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=4)


def get_appointment_actions_keyboard(appointment_id: int, status: AppointmentStatus) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é

    Args:
        appointment_id: ID –∑–∞–ø–∏—Å–∏
        status: —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏
    """
    buttons = []
    if status == AppointmentStatus.PENDING:
        buttons.append([
            InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=f"appointment:confirm:{appointment_id}"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"appointment:cancel:{appointment_id}")
        ])
    elif status == AppointmentStatus.CONFIRMED:
        buttons.append([
            InlineKeyboardButton(text="üèÅ –í—ã–ø–æ–ª–Ω–µ–Ω–æ", callback_data=f"appointment:complete:{appointment_id}"),
            InlineKeyboardButton(text="üìÖ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", callback_data=f"appointment:reschedule:{appointment_id}")
        ])
        buttons.append([
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"appointment:cancel:{appointment_id}")
        ])
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)


def get_transaction_type_keyboard() -> InlineKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    buttons = [
        [
            InlineKeyboardButton(text="üí∞ –ü—Ä–∏—Ö–æ–¥", callback_data="transaction:income"),
            InlineKeyboardButton(text="üí∏ –†–∞—Å—Ö–æ–¥", callback_data="transaction:expense")
        ],
        [
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)


def get_pagination_keyboard(
    page: int,
    total_pages: int,
    prefix: str,
    items_per_page: Optional[int] = None
) -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–∞–≥–∏–Ω–∞—Ü–∏–∏

    Args:
        page: —Ç–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
        total_pages: –≤—Å–µ–≥–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        prefix: –ø—Ä–µ—Ñ–∏–∫—Å –¥–ª—è callback_data
        items_per_page: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    """
    buttons = []

    # –ü–µ—Ä–≤–∞—è —Å—Ç—Ä–æ–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    nav_row = []
    if page > 1:
        nav_row.append(InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"{prefix}:{page-1}"))
    nav_row.append(InlineKeyboardButton(text=f"{page}/{total_pages}", callback_data="ignore"))
    if page < total_pages:
        nav_row.append(InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"{prefix}:{page+1}"))
    buttons.append(nav_row)

    # –°—Ç—Ä–æ–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (–µ—Å–ª–∏ –∑–∞–¥–∞–Ω–æ)
    if items_per_page:
        items_row = [InlineKeyboardButton(text=f"{n}Ô∏è‚É£", callback_data=f"{prefix}:per_page:{n}")
                     for n in [10, 20, 50]]
        buttons.append(items_row)

    # –°—Ç—Ä–æ–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–∫—Ä—ã—Ç–∏—è
    buttons.append([InlineKeyboardButton(text="‚ùå –ó–∞–∫—Ä—ã—Ç—å", callback_data="close")])

    return InlineKeyboardMarkup(inline_keyboard=buttons)


def get_service_confirmation_keyboard() -> InlineKeyboardMarkup:
    """
    –°–æ–∑–¥–∞–µ—Ç inline‚Äë–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∏—è —É—Å–ª—É–≥–∏.
    Callback data –Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å "service:" –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏.
    """
    buttons = [
        [
            InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data="service:confirm"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="service:cancel")
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons, row_width=2)
